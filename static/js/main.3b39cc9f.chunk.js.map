{"version":3,"sources":["AccordionItem.js","Accordion.js","CTAGridItem.js","CTAGrid.js","App.js","reportWebVitals.js","index.js"],"names":["AccordionItem","handleClick","name","tagline","first_brewed","description","className","onClick","Accordion","beersArray","e","item","currentTarget","querySelector","style","display","map","beer","abv","id","CTAGridItem","CTAGrid","App","useState","beers","setBeers","sortBeers","type","sort","a","b","localeCompare","useEffect","fetch","response","ok","json","data","alert","fetchData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAceA,EAdO,SAAC,GAA6D,IAA5DC,EAA2D,EAA3DA,YAAaC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,YAE9D,OACI,sBAAKC,UAAU,OAAOC,QAASN,EAA/B,UACI,6BAAKC,IACL,sBAAKI,UAAU,UAAf,UACI,6BAAKH,IACL,qDAAwBC,KACxB,8CAAiBC,YC0BlBG,EA9BG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAEVR,EAAc,SAACS,GACjB,IAAIC,EAAOD,EAAEE,cAAcC,cAAc,YACd,UAAvBF,EAAKG,MAAMC,QACfJ,EAAKG,MAAMC,QAAU,OAErBJ,EAAKG,MAAMC,QAAU,SAIzB,OACI,qBAAKT,UAAU,iBAAf,SACMG,EAAWO,KAAK,SAAAC,GAAI,OAClB,cAAC,EAAD,CACIhB,YAAaA,EACbiB,IAAKD,EAAKC,IACVhB,KAAMe,EAAKf,KACXC,QAASc,EAAKd,QACdC,aAAca,EAAKb,aACnBC,YAAaY,EAAKZ,aACbY,EAAKE,UCZfC,MAXf,YAAsE,EAAhDF,IAAiD,IAA5ChB,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,YACpD,OACI,sBAAKC,UAAU,gBAAf,UACI,6BAAKJ,IACL,6BAAKC,IACL,qDAAwBC,KACxB,8CAAiBC,SCadgB,MAnBf,YAAgC,IAAdZ,EAAa,EAAbA,WACd,OACI,qBAAKH,UAAU,WAAf,SACMG,EAAWO,KAAK,SAAAC,GACd,OACI,cAAC,EAAD,CACAC,IAAKD,EAAKC,IACVhB,KAAMe,EAAKf,KACXC,QAASc,EAAKd,QACdC,aAAca,EAAKb,aACnBC,YAAaY,EAAKZ,aACbY,EAAKE,UCuCfG,MA/Cf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,KAKPC,EAAY,SAACC,GACjB,OAAOA,GACL,IAAK,MACA,OAAOF,EAAS,YAAID,EAAMI,MAAK,SAACC,EAAEC,GAAH,OAASA,EAAEZ,IAAIW,EAAEX,SACrD,IAAK,OACF,OAAQO,EAAS,YAAID,EAAMI,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAE3B,KAAK6B,cAAcD,EAAE5B,WAChE,QACI,OAAQ,OAmBnB,OAhBE8B,qBAAW,YACQ,uCAAG,8BAAAH,EAAA,sEACSI,MAAM,+CADf,YACRC,EADQ,QAEDC,GAFC,iCAGSD,EAASE,OAHlB,OAGJC,EAHI,OAIVZ,EAASY,GAJC,wBAMVC,MAAM,mEANI,4CAAH,qDAWfC,KACD,IAIH,sBAAKjC,UAAU,MAAf,UACE,iCACE,gDAEF,sBAAKA,UAAU,iBAAf,2BACE,sBAAMC,QAAS,kBAAMmB,EAAU,SAA/B,oBADF,QAGE,sBAAMnB,QAAS,kBAAMmB,EAAU,QAA/B,sBAEF,cAAC,EAAD,CAAWjB,WAAYe,IACvB,cAAC,EAAD,CAASf,WAAYe,QCnCZgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3b39cc9f.chunk.js","sourcesContent":["const AccordionItem = ({handleClick, name, tagline, first_brewed, description}) => {\r\n\r\n    return (\r\n        <div className=\"beer\" onClick={handleClick}>\r\n            <h2>{name}</h2>\r\n            <div className=\"details\">\r\n                <h3>{tagline}</h3>\r\n                <h4>Date first brewed: {first_brewed}</h4>\r\n                <p>Description: {description}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccordionItem;","\r\nimport AccordionItem from './AccordionItem';\r\n\r\n\r\nconst Accordion = ({beersArray}) => {\r\n\r\n    const handleClick = (e) => {\r\n        let item = e.currentTarget.querySelector('.details');\r\n       if ( item.style.display === 'block') {\r\n        item.style.display = 'none';\r\n       } else {\r\n        item.style.display = 'block';\r\n       }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"beer-container\">\r\n            { beersArray.map( beer => \r\n                <AccordionItem\r\n                    handleClick={handleClick}\r\n                    abv={beer.abv} \r\n                    name={beer.name}\r\n                    tagline={beer.tagline}\r\n                    first_brewed={beer.first_brewed}\r\n                    description={beer.description} \r\n                    key={beer.id} \r\n                />\r\n                ) \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Accordion;","\r\n\r\nfunction CTAGridItem({abv, name, tagline, first_brewed, description}) {\r\n    return (\r\n        <div className=\"cta-grid-item\">\r\n            <h1>{name}</h1>\r\n            <h3>{tagline}</h3>\r\n            <h3>Date first brewed: {first_brewed}</h3>\r\n            <p>Description: {description}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CTAGridItem\r\n","import CTAGridItem from \"./CTAGridItem\"\r\n\r\nfunction CTAGrid({beersArray}) {\r\n    return (\r\n        <div className=\"cta-grid\">\r\n            { beersArray.map (beer => {\r\n                return (\r\n                    <CTAGridItem\r\n                    abv={beer.abv} \r\n                    name={beer.name}\r\n                    tagline={beer.tagline}\r\n                    first_brewed={beer.first_brewed}\r\n                    description={beer.description} \r\n                    key={beer.id} \r\n                />\r\n                )\r\n            }) }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CTAGrid\r\n","import {useState, useEffect} from 'react';\nimport Accordion from './Accordion';\nimport CTAGrid from './CTAGrid';\n\n\nfunction App() {\n\n  const [beers, setBeers] = useState([]);\n  // const sortBeers = type =>  setBeers([...beers.sort((a,b) => a.name - b.name)]);\n\n  const sortBeers = (type) => {\n    switch(type) {\n      case 'abv' :\n           return setBeers([...beers.sort((a,b) => b.abv-a.abv)])\n      case 'name':\n         return  setBeers([...beers.sort((a,b) => a.name.localeCompare(b.name))])\n         default:\n             return  null\n   }\n  }\n    useEffect( () => {\n        const fetchData = async () => {\n            const response = await fetch('https://api.punkapi.com/v2/beers?per_page=8');\n            if (response.ok) {\n                const data = await response.json();\n                setBeers(data);  \n            } else {\n                alert('There was a problem fetching the beers, please try again later.');\n            }\n            \n        }\n\n        fetchData();\n    }, []);\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h3>Cheers Beers</h3>\n      </header>\n      <div className=\"sort-container\"> Sort beers by \n        <span onClick={() => sortBeers('name')}> name </span> \n        or by \n        <span onClick={() => sortBeers('abv')}> abv </span>\n      </div>\n      <Accordion beersArray={beers} />\n      <CTAGrid beersArray={beers} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}